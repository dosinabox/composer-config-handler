<?php

namespace Qobuz\ConfigHandler;

use Composer\IO\IOInterface;
use Composer\Script\Event;
use Symfony\Component\Yaml\Escaper;

class ScriptHandler
{
  public static function substituteValues(Event $event)
  {
    $io = $event->getIO();

    $extras = $event->getComposer()->getPackage()->getExtra();

    if (empty($extras['config-handler-parameters']['substitutions'])) {
      throw new \InvalidArgumentException('The extra.config-handler-parameters.substitutions setting is required to use this script handler.');
    }

    foreach ($extras['config-handler-parameters']['substitutions'] as $substitution) {
      $io->write('<info>Loading substitution ... </info>');

      $sourceFile = !empty($substitution['sourcefile']) ? $substitution['sourcefile'] : null;
      $targetFile = !empty($substitution['targetfile']) ? $substitution['targetfile'] : null;

      if (is_null($sourceFile) && is_null($targetFile)) {
        throw new \InvalidArgumentException('Each entry in extra.config-handler-parameters.substitutions must include either a sourcefile or a targetfile.');
      }

      $filetype = !empty($substitution['filetype']) ? $substitution['filetype'] : 'auto';
      $escaping = !empty($substitution['escaping']) ? $substitution['escaping'] : 'auto';

      // Read Source File
      $io->write(sprintf('  Source File: <comment>%s</comment>', $sourceFile));
      $source = file_get_contents($sourceFile);

      $target = $source;

      $placeholdersNameFilter = !empty($substitution['placeholders']['namefilter']) ? $substitution['placeholders']['namefilter'] : null;
      $placeholderMatches = array();
      preg_match_all('/%(\w+?)%/', $source, $placeholderMatches);
      if (!empty($placeholderMatches) && !empty($placeholderMatches[0]) && !empty($placeholderMatches[1])) {
        // At least one placeholder found in the file
        foreach (array_combine($placeholderMatches[0], $placeholderMatches[1]) as $placeholderMatch => $placeholderName) {
          if (is_null($placeholdersNameFilter) || (!is_null($placeholdersNameFilter) && preg_match($placeholdersNameFilter, $placeholderName))) {
            $substitutionValue = getenv($placeholderName);
            if (!empty($substitutionValue)) {
              $io->write(sprintf('  Placeholder: <comment>%s</comment> <info>matched environment value</info>', $placeholderName));

              $escapedSubstitutionValue = '';
              switch($escaping) {
                case 'php':
                  $escapedSubstitutionValue = var_export($substitutionValue, true);
                  break;
                case 'yaml':
                  $escapedSubstitutionValue = $substitutionValue === '~' ? '~' : Escaper::escapeWithSingleQuotes($substitutionValue);
                  break;
                case 'auto':
                default:
                  $escapedSubstitutionValue = $substitutionValue;
                  break;
              }
              $target = preg_replace("/${placeholderMatch}/", $escapedSubstitutionValue, $target);
            } else {
              $io->write(sprintf('  Placeholder: <comment>%s</comment> <error>matched empty environment value</error>', $placeholderName));
            }
          } else {
            $io->write(sprintf('  Placeholder: <comment>%s</comment> <info>skipped</info>', $placeholderName));
          }
        }
      } else {
        // No placeholder found in the file
        $io->write('  <info>No placeholder found in file</info>');
      }

      // Write Target File
      $io->write(sprintf('  Target File: <comment>%s</comment>', $targetFile));

      $commentLines = array(
        '',
        'DO NOT COMMIT TO SOURCE CONTROL',
        "This file was auto-generated by composer on " . date('c'),
        "from source file ${sourceFile}",
        '',
      );
      $comment = '';
      switch($filetype) {
        case 'php':
          $comment .= '<?php' . "\n";
          $comment .= implode('', array_map(function($s) { return '  // ' . $s . "\n"; }, $commentLines));
          $comment .= '?>';
          break;
        case 'yaml':
          $comment .= implode('', array_map(function($s) { return '# ' . $s . "\n"; }, $commentLines));
          break;
        case 'auto':
        default:
          break;
      }

      file_put_contents($targetFile, $comment . $target);
    }
  }

};
